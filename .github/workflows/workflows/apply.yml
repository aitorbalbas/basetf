---
name: Terraform Apply Workflow

on:
  # Trigger the workflow on master push
  push:
    # Future: Run in autodeploy branches --> depends on environment
    branches:
      - master
    paths:
      - "iac/**"
env:
  PROJECT_AUTO_TFVARS: 'project.auto.tfvars'
  TF_WORKING_DIR: './iac'
  TF_ACTION_VERSION: '0.12.24'
  TF_ENVIROMENTS_PATH: 'environments/'
  GITHUB_MESSAGE_PATH: '.head_commit.message'

jobs:
  validate_terraform:
    name: Apply Terraform
    runs-on: ubuntu-latest

    steps:
      
      - name: 'Checkout Repo'
        uses: actions/checkout@v2.0.0

      - name: 'Check Commit Message'
        run: |
          # Get enviroment info head commit: "i.e.: (dev) this is the message"
          export ENVIRONMENT_COMMIT_MESSAGE=$(jq ${{ env.GITHUB_MESSAGE_PATH }} $GITHUB_EVENT_PATH --raw-output | awk -F '[()]' '{print $(NR+1)}')
          echo "Commit message: $(jq ${{ env.GITHUB_MESSAGE_PATH }} $GITHUB_EVENT_PATH --raw-output)"
          echo "Environment: $ENVIRONMENT_COMMIT_MESSAGE"
          # Check if the environments path contains the environment set in the commited message
          if ([[ ! -d "${{ env.TF_ENVIROMENTS_PATH }}$ENVIRONMENT_COMMIT_MESSAGE" ]] || [[ -z "$ENVIRONMENT_COMMIT_MESSAGE" ]]); then echo "ERROR: Wrong environment provided (usage: i.e.: (dev) commit message)"; exit 1 ; fi
          echo ::set-env name=Environment_Commited::${ENVIRONMENT_COMMIT_MESSAGE}
        working-directory: ${{ env.TF_WORKING_DIR}}

      - name: 'Select Terraform Backend and Landing'
        run: |
          # Select Backend and Landing (future: variable names in github secrets!!!)
          export PREFIX=$(date +%s%3N)
          export ENVIRONMENT=$(echo ${ENVIROMENT_COMMITED}|tr a-z A-Z)
          if ([[ ! -n "${ENVIRONMENT}" ]] || [[ -z ${ENVIRONMENT} ]]) then exit 1; fi
          export AZ_TF_BACKEND="AZ_TF_BACKEND_$ENVIRONMENT"
          export AZ_TF_LANDING="AZ_TF_LANDING_$ENVIRONMENT"
          export TF_CLOUD_VARS="TF_CLOUD_VARS_$ENVIRONMENT"
          bash -c 'echo ${!AZ_TF_BACKEND} > ${PREFIX}-backend.tfvars.json'
          bash -c 'echo ${!AZ_TF_LANDING} > ${PREFIX}-landing.tfvars.json'
          bash -c 'if ([[ -n "${!TF_CLOUD_VARS}" ]] || [[ ! -z ${!TF_CLOUD_VARS} ]]) then echo ${!TF_CLOUD_VARS} > ${PREFIX}-cloud.tfvars.json; fi'
          echo ::set-env name=PREFIX::${PREFIX}
        working-directory: ${{ env.TF_WORKING_DIR}}
        env:
          ENVIROMENT_COMMITED : ${{ env.Environment_Commited }}
          # future: dynamic secret variable name
          AZ_TF_BACKEND_DEV : ${{ secrets.AZ_TF_BACKEND_DEV }}
          AZ_TF_LANDING_DEV : ${{ secrets.AZ_TF_LANDING_DEV }}
          TF_CLOUD_VARS_DEV : ${{ secrets.TF_CLOUD_VARS_DEV }}
          AZ_TF_BACKEND_PRE : ${{ secrets.AZ_TF_BACKEND_PRE }}
          AZ_TF_LANDING_PRE : ${{ secrets.AZ_TF_LANDING_PRE }}
          TF_CLOUD_VARS_PRE : ${{ secrets.TF_CLOUD_VARS_PRE }}
          AZ_TF_BACKEND_PRO : ${{ secrets.AZ_TF_BACKEND_PRO }}
          AZ_TF_LANDING_PRO : ${{ secrets.AZ_TF_LANDING_PRO }}
          TF_CLOUD_VARS_PRO : ${{ secrets.TF_CLOUD_VARS_PRO }}

      - name: 'Build tfvars'
        run: |
          ls -l
          # Default precedence https://www.terraform.io/docs/configuration/variables.html
          # Workflow precedence (order provided precedence): environment tfvars, root tfvars  
          # Build tfvars arg
          # Get all tfvars in root path
          export TERRAFORM_ARG_TFVARS="-var-file=./${{ env.PREFIX }}-landing.tfvars.json "
          # Include Cloud varfile if exists
          if [[ -f "${PREFIX}-cloud-${ENVIRONMENT}.tfvars.json" ]]; then echo export TERRAFORM_ARG_TFVARS="$TERRAFORM_ARG_TFVARS -var-file=./${PREFIX}-cloud-${ENVIRONMENT}.tfvars.json" ; fi
          # environment vars (higher precedence)
          for tfvarfile in $( find ${{ env.TF_ENVIROMENTS_PATH }}$ENVIRONMENT -type f | grep -P '(^(.*\.(tfvars|tfvars\.json))$)' )
            do TERRAFORM_ARG_TFVARS="$TERRAFORM_ARG_TFVARS-var-file=$tfvarfile "; 
            echo "ENV-$TERRAFORM_ARG_TFVARS"
          done
          ## common tfvars root folder (terraform.tfvars ans *auto* are excluded)
          ##for tfvarfile in $( find . -maxdepth 1 -type f | grep -P '(?!.*(auto))(?!.*terraform\.(tfvars|tfvars\.json))^(.*\.(tfvars|tfvars\.json))$' )
          ##  do TERRAFORM_ARG_TFVARS="$TERRAFORM_ARG_TFVARS-var-file=$tfvarfile "; 
          ##  echo "ROOT-$TERRAFORM_ARG_TFVARS"
          ##done
          echo "+++++++++++++ TFVARS: $TERRAFORM_ARG_TFVARS"
          echo ::set-env name=TerraformArgTfvars::${TERRAFORM_ARG_TFVARS}
        working-directory: ${{ env.TF_WORKING_DIR}}
        env:
          PREFIX : ${{ env.PREFIX }}
          ENVIRONMENT : ${{ env.Environment_Commited }}

      #- name: 'Build Path for Remote Tfstate'
      #  run: |
      #    export BUSINESS_UNIT=$(grep "business_unit \+=" ${{ env.PROJECT_AUTO_TFVARS }} | awk -F\" '{print tolower($2)}')
      #    export DEPARTMENT=$(grep "department \+=" ${{ env.PROJECT_AUTO_TFVARS }} | awk -F\" '{print tolower($2)}')
      #    export PROJECT=$(grep "project \+=" ${{ env.PROJECT_AUTO_TFVARS }} | awk -F\" '{print tolower($2)}')
      #    export ENVIRONMENT=${{ env.Environment_Commited }}
      #    if [[ -z $BUSINESS_UNIT || -z $DEPARTMENT || -z $PROJECT ]]; then echo "Wrong ${{ env.PROJECT_AUTO_TFVARS }} content" && exit 1;fi
      #    export TFSTATE_PATH="${BUSINESS_UNIT}/${DEPARTMENT}/${PROJECT}/${ENVIRONMENT}"
      #    echo ::set-env name=TfstatePath::${TFSTATE_PATH}
      #  working-directory: ${{ env.TF_WORKING_DIR}}

      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: ${{ env.TF_ACTION_VERSION}}
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ${{ env.TF_WORKING_DIR}}
          tf_actions_comment: true
          args: '-get=true -get-plugins=true -lock=true -backend-config="./${{ env.PREFIX }}-backend.tfvars.json"'

      - name: 'Terraform Plan'
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: ${{ env.TF_ACTION_VERSION}}
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: ${{ env.TF_WORKING_DIR}}
          tf_actions_comment: false
          args: '${{ env.TerraformArgTfvars }} -lock=true'

      - name: 'Create Snapshot current tfstate in Azure'
        run: |
          export AZ_STORAGE_ACCOUNT_NAME=$(jq .storage_account_name ./${{ env.PREFIX }}-backend.tfvars.json --raw-output)
          export AZ_CONTAINER_NAME=$(jq .container_name ./${{ env.PREFIX }}-backend.tfvars.json --raw-output)
          export AZ_SAS_TOKEN=$(jq .sas_token ./${{ env.PREFIX }}-backend.tfvars.json --raw-output)
          export AZ_TFSTATE_NAME=$(jq .key ./${{ env.PREFIX }}-backend.tfvars.json --raw-output)
          curl -X PUT -H "x-ms-date: $(date -u)" -H "x-ms-blob-type: BlockBlob" -H "Content-Type: application/json" -H "Content-Length: 0" "https://${AZ_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${AZ_CONTAINER_NAME}/${{ env.TfstatePath }}/${AZ_TFSTATE_NAME}${AZ_SAS_TOKEN}&comp=snapshot" -i
        working-directory: ${{ env.TF_WORKING_DIR}}
        
      - name: 'Terraform Apply'
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: ${{ env.TF_ACTION_VERSION}}
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: ${{ env.TF_WORKING_DIR}}
          tf_actions_comment: true
          args: '${{ env.TerraformArgTfvars }} -lock=true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Remove backend and landing file'
        run: |
          echo "" > ./${{ env.PREFIX }}-backend.tfvars.json; rm -fr ./${{ env.PREFIX }}-backend.tfvars.json
          echo "" > ./${{ env.PREFIX }}-landing.tfvars.json; rm -fr ./${{ env.PREFIX }}-landing.tfvars.json
          echo "" > ./${{ env.PREFIX }}-cloud.tfvars.json; rm -fr ./${{ env.PREFIX }}-cloud.tfvars.json
          ls -l

