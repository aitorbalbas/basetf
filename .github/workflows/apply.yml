---
name: Terraform Apply Workflow

on:
  # Trigger the workflow on master push
  push:
    # Future: Run in ALL branches
    branches:
      - master
    paths:
      - "iac/**"
env:
  PROJECT_AUTO_TFVARS: 'project.auto.tfvars'
  TF_WORKING_DIR: './iac'
  TF_ACTION_VERSION: '0.12.24'
jobs:
  validate_terraform:
    name: Apply Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2.0.0
      - name: 'Search TFVARS https://www.terraform.io/docs/configuration/variables.html'
        run: |
          export TERRAFORM_ARG_TFVARS=""
          for tfvarfile in $( find . | grep -P '(?!.*(auto))(?!.*terraform\.(tfvars|tfvars\.json))^(.*\.(tfvars|tfvars\.json))$')
            do TERRAFORM_ARG_TFVARS="-var-file=$tfvarfile $TERRAFORM_ARG_TFVARS"; 
          done
          echo ::set-env name=terraformargtfvars::${TERRAFORM_ARG_TFVARS}
        working-directory: ${{ env.TF_WORKING_DIR}}
      - name: 'Build Path'
        run: |
          export BUSINESS_UNIT=$(grep "business_unit \+=" ${{ env.PROJECT_AUTO_TFVARS }} | awk -F\" '{print tolower($2)}')
          export DEPARTMENT=$(grep "department \+=" ${{ env.PROJECT_AUTO_TFVARS }} | awk -F\" '{print tolower($2)}')
          export PROJECT=$(grep "project \+=" ${{ env.PROJECT_AUTO_TFVARS }} | awk -F\" '{print tolower($2)}')
          export ENVIRONMENT=$(grep "environment \+=" ${{ env.PROJECT_AUTO_TFVARS }} | awk -F\" '{print tolower($2)}')
          if [[ -z $BUSINESS_UNIT || -z $DEPARTMENT || -z $PROJECT ]]; then echo "Wrong ${{ env.PROJECT_AUTO_TFVARS }} content" && exit 1;fi
          export TFSTATE_PATH="${BUSINESS_UNIT}/${DEPARTMENT}/${PROJECT}/${ENVIRONMENT}"
          echo ::set-env name=tfstatepath::${TFSTATE_PATH}
        working-directory: ${{ env.TF_WORKING_DIR}}
      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: ${{ env.TF_ACTION_VERSION}}
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ${{ env.TF_WORKING_DIR}}
          tf_actions_comment: true
          args: '-backend-config="storage_account_name=${{ secrets.AZ_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ secrets.AZ_CONTAINER_NAME }}" -backend-config="sas_token=${{ secrets.AZ_SAS_TOKEN }}" -backend-config="key=${{ env.tfstatepath }}\terraform.tfstate"'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Terraform Plan
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: ${{ env.TF_ACTION_VERSION}}
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: ${{ env.TF_WORKING_DIR}}
          tf_actions_comment: true
          args: '${{ env.terraformargtfvars }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Terraform Apply
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: ${{ env.TF_ACTION_VERSION}}
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: ${{ env.TF_WORKING_DIR}}
          tf_actions_comment: true
          args: '${{ env.terraformargtfvars }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
