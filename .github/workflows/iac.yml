---
name: IaC Workflow

on:
  push:
    branches:
      - master
    paths:
      - "iac/**"
  pull_request:
    # Plan: master
    branches:
      - master
    paths:
      - "iac/environments/**"

env:
  PROJECT_AUTO_TFVARS: 'project.auto.tfvars'
  TF_WORKING_DIR: './iac'
  ENVIRONMENTS_WORKING_DIR: './iac/environments/'
  TF_ACTION_VERSION: '0.12.28'
  TF_ENVIROMENTS_PATH: 'environments/'
  CONFIG_GIT_REPO: 'aitorbalbas/basetfdeploy'
  CONFIG_GIT_PATH: 'configrepo'
  USER_EMAIL: 'aitorbalbas@gmail.com'
  GITHUB_USERNAME: 'aitorbalbas'
  BRANCH_PREFIX: 'promotions/'

jobs:
  validate_terraform:
    name: Terraform
    ## TODO: no latest!!!
    runs-on: ubuntu-latest

    steps:

      - name: 'Checkout Repo'
        uses: actions/checkout@v2.3.1
        with:
          # Fetch all history for all tags and branches
          fetch-depth: 0

      # Get files commited
      - name: 'Get files commited between two pushes (1+ commits)'
        run: |
          export COMMIT_ID_CURRENT=$(jq .after $GITHUB_EVENT_PATH --raw-output)
          export COMMIT_ID_BEFORE=$(jq .before $GITHUB_EVENT_PATH --raw-output)
          #echo "FILES_COMMITTED"
          FILES_COMMITTED=$(git diff --name-only $COMMIT_ID_CURRENT $COMMIT_ID_BEFORE|sort|uniq|grep -i ${TF_ENVIROMENTS_PATH}|awk -F${TF_ENVIROMENTS_PATH} '{ print $2 }')
          echo $FILES_COMMITTED
          echo ::set-env name=FILES_COMMITTED::${FILES_COMMITTED}
        env:
          TF_ENVIROMENTS_PATH: ${{ env.TF_ENVIROMENTS_PATH}}

      - name: 'Checkout the other Repo (environments real repo)'
        uses: actions/checkout@v2.3.1
        with:
          # Workflows triggered by pull_request events will by default check out a merge commit. To prevent the merge commit being included in created pull requests it is necessary to checkout the head_ref.
          ref: ${{ github.head_ref }}
          token: ${{ secrets.ABP_PERSONAL_TOKEN }}
          repository: ${{ env.CONFIG_GIT_REPO }}
          path: ${{ env.CONFIG_GIT_PATH }}



      - name: 'flatten files'
        run: |
          ls -a
          arr=(${{ env.FILES_COMMITTED }})
          for i in "${arr[@]}"
            do
              idirname="${i%/*}"
              echo "xxxABP: idirname es: $idirname"
              echo "xxxABP: estamos en: $i"
              childdircount=$(find $idirname -maxdepth 1 -type d | wc -l)
              echo "xxxABP:el numero para $i es $childdircount"
                if [ $((childdircount - 1)) -gt 0 ]
                then
                  ENTORNOS=$(find $idirname -maxdepth 1 -mindepth 1-type d)
                  echo "El cambio solo afecta a estos entornos  : $ENTORNOS"
                fi
            done
        working-directory: ${{ env.ENVIRONMENTS_WORKING_DIR}}

      # Get terraform enviroments
      - name: 'identify files to copy to deploy repo'
        run: |

          #---get the commited files and set an array with them
          arr=(${{ env.FILES_COMMITTED }})
          #---iterate the files commited elements looking to identify wich environments are affected
          for i in "${arr[@]}"
            do
              echo "-----ABP: estamos en: $i"
              #---get only the path withot filename
              idirname="${i%/*}"
              echo "-----ABP: idirname es $idirname"
              #---count how many files are under this path,if more than one, the file affects many environments
              childdircount=$(find $idirname -maxdepth 1 -type d | wc -l)
              echo "-----ABP:el numero para $i es $childdircount"
              if [ $((childdircount - 1)) -gt 0 ]
              then
                ENTORNOS=$(find $idirname -type d ! -path '$idirname')
                echo "-----ABP:El cambio afecta a estos entornos: $ENTORNOS"
                # AITOR PENDIENTE DE ALGORINTMO DE COPIADO FLATTEN
                #arr2=($ENTORNOS)
                #for ent in "${arr2[@]}"
                 #do
                   #mkdir -p "../../auxenv/$idirname" && cp "$i" "$_"
                 #done
              else
                echo "-----ABP:El cambio solo afecta al entorno $idirname"
                #copy the file to the other repository
                ls -a
                mkdir -p "$idirname" && cp "../iac/environments/$i" "$_"
                echo "despues"
                ls -a
                git config --global user.email "${{ env.USER_EMAIL }}"
                git config --global user.name "${{ env.GITHUB_USERNAME }}"
                git branch ${{ env.BRANCH_PREFIX }}$idirname
                git checkout ${{ env.BRANCH_PREFIX }}$idirname
                git add .
                git commit --message "Update from github action"
                git push --set-upstream origin ${{ env.BRANCH_PREFIX }}$idirname
              fi
            done
          echo "-----ABP:hasta aqui ---------"
        working-directory: ${{ env.CONFIG_GIT_PATH}}

          # Get terraform enviroments
      - name: 'Copy files to deploy repo'
        run: |
            exit 111
            USER_EMAIL="aitorbalbas@gmail.com"
            GITHUB_USERNAME="aitorbalbas"
            GITHUB_REPO="basetfdeploy"

            git config --global user.email "$USER_EMAIL"
            git config --global user.name "$GITHUB_USERNAME"
            git clone "https://${{secrets.ABP_PERSONAL_TOKEN}}@github.com/$GITHUB_USERNAME/$GITHUB_REPO.git"
            git checkout -b aitor

            # Copy files into the git and deletes all git
            #find "$CLONE_DIR" | grep -v "^$CLONE_DIR/\.git" | grep -v "^$CLONE_DIR$" | xargs rm -rf # delete all files (to handle deletions)
            # cp -r "$FOLDER"/* "$CLONE_DIR"

            ls -a
            #cd iac/environments/
            #xargs -a  ${{ env.FILES_TO_COPY}} cp -t ../../copied
            cd basetfdeploy
            > README.md
            echo ${{ env.FILES_TO_COPY }} >> README.md
            ls -a >> prueba.txt
            git add .
            git commit --message "Update from github action"
        working-directory: ${{ env.ENVIRONMENTS_WORKING_DIR}}
